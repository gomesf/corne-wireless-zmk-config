/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <13 14>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <2 1>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <9 10>;
        };
    };

    behaviors {
        hold_tap: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <0 12 24 25 13 1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 36 37 38 39 40 41>;
            tapping-term-ms = <1000>;
        };
    };

    macros {
        mouse: mouse {
            compatible = "zmk,behavior-macro";
            label = "MOUSE";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT &kp LEFT_WIN &kp C>,
                <&macro_release>,
                <&kp LEFT_ALT &kp LEFT_META &kp C>;
        };
        mission_control: mission_control {
            compatible = "zmk,behavior-macro";
            label = "MISSION_CONTROL";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL &kp UP_ARROW>,
                <&macro_release>,
                <&kp LEFT_CONTROL &kp UP_ARROW>;
        };
        cicle_all_windows: cicle_all_windows {
            compatible = "zmk,behavior-macro";
            label = "CICLE_ALL_WINDOWS";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_CONTROL &kp DOWN_ARROW>,
                <&macro_release>,
                <&kp LEFT_CONTROL &kp DOWN_ARROW>;
        };
        custom_alt_tab: custom_alt_tab {
            compatible = "zmk,behavior-macro";
            label = "CUSTOM_ALT_TAB";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_CONTROL &kp DOWN_ARROW>,
                <&macro_release>,
                <&kp LEFT_CONTROL &kp DOWN_ARROW>,
                <&macro_tap>,
                <&kp TAB &kp DOWN &kp ENTER>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            label = "Base";
            bindings = <
&trans  &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y    &kp U  &kp I      &kp O    &kp P     &trans
&trans  &kp A  &kp S  &kp D     &kp F  &kp G        &kp H    &kp J  &kp K      &kp L    &kp SEMI  &trans
&trans  &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N    &kp M  &kp COMMA  &kp DOT  &kp FSLH  &trans
                      &kp LGUI  &mo 1  &kp SPACE    &kp RET  &mo 2  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Lower";
            bindings = <
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp N3    &kp N4  &kp N5       &kp N6    &kp N7          &kp N8     &kp N9  &kp N0  &trans
&trans  &kp APOS      &trans        &trans    &trans  &trans       &trans    &kp UP_ARROW    &trans     &trans  &trans  &trans
&trans  &trans        &trans        &trans    &trans  &trans       &kp LEFT  &kp DOWN_ARROW  &kp RIGHT  &trans  &trans  &trans
                                    &kp LGUI  &trans  &kp SPACE    &kp RET   &trans          &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Raise";
            bindings = <
&trans  &kp EXCL  &kp AT     &kp HASH           &kp DLLR   &kp PRCNT    &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &trans
&trans  &kp APOS  &kp TILDE  &kp DOUBLE_QUOTES  &kp COLON  &kp SEMI     &kp MINUS  &kp EQUAL  &kp LBKT         &kp RBKT  &kp BSLH  &trans
&trans  &trans    &trans     &trans             &trans     &trans       &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC  &kp PIPE  &trans
                             &kp LGUI           &trans     &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        both_layer {
            bindings = <
&trans  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans  &trans  &custom_alt_tab       &mouse  &trans  &trans      &trans  &bt BT_SEL 0  &trans
&trans  &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &trans  &trans  &cicle_all_windows    &trans  &trans  &trans      &trans  &bt BT_SEL 1  &trans
&trans  &trans                &trans                &trans  &trans  &mission_control      &trans  &trans  &trans      &trans  &bt BT_SEL 2  &trans
                                                    &trans  &trans  &trans                &trans  &trans  &bt BT_CLR
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        both {
            if-layers = <2 1>;
            then-layer = <3>;
        };
    };
};
